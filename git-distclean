#!/usr/bin/env python

import os
import optparse
import subprocess

def getConfig(which, config_file, config_src):
    keep = {}
    run_args = ['git', 'config']

    if config_file:
        run_args.extend(['--file', config_file])
    elif config_src:
        run_args.append(config_src)

    run_args.extend(['--get-regexp', 'distclean'])

    proc = subprocess.Popen(run_args, stdout=subprocess.PIPE)
    (lines, dummy) = proc.communicate()

    for line in lines.split("\n"):
        if line:
            (k, v) = line.split(" ", 1)

            if k == "distclean.keep":
                keep[v] = 1

            elif k == "distclean.remove":
                try:
                    del keep[v]
                except:
                    print "Attempting to remove value not in keep list: %s" % (v,)

            else:
                print "Unknown configuration option: %s" % (line,)

    results = keep.keys()
    results.sort()
    return results


description = """A tool to clean (most) everything in your git tree.

Inspired by 'make distclean' and that 'git clean -f -d -x' cleans a bit too much (like IDE project files).

git distclean is integrated with the git config system. Specifically, you can use
'git config --add distclean.keep FILE' to tell it to not delete FILE. FILE can be a shell RE, such as
my*safe to match files like mysafe, my_safe, and my_isnt_this_safe.

(Advanced usage: distclean.remove will remove a specified file from the list of files to keep, so that
you can override global settings in the local configuration file.)
"""

parser = optparse.OptionParser(description=description)
parser.add_option("-f", "--force", action="store_const", dest="action", const="delete", default="help", help="Delete (clean) files")
parser.add_option("-n", "--show", action="store_const", dest="action", const="show", help="Show what would be cleaned")
parser.add_option("-l", "--list", action="store_const", dest="action", const="list", help="Show the ignore list")

parser.add_option("-c", "--file", action="store", dest="config_file", default=None, help="Use the specified configuration file")

parser.add_option("--global", action="store_const", dest="config_src", const="--global", default=None, help="Show the ignore list")
parser.add_option("--system", action="store_const", dest="config_src", const="--system", help="Show the ignore list")

(options, args) = parser.parse_args()

if options.action == "help":
    print "No action selected, nothing done."
    parser.print_help()
    exit(0)

keep = getConfig('system', options.config_file, options.config_src)

if options.action == "list":
    for keep_arg in keep:
        print "Keeping: %s" % (keep_arg,)
    exit(0)

run_args = ['git', 'clean']

if options.action == "show":
    run_args.append("-ndx")
elif options.action == "delete":
    run_args.append("-fdx")
else:
    print "Internal Error"
    exit(-1)

for keep_arg in keep:
    run_args.append('-e')
    run_args.append(keep_arg)

proc = subprocess.Popen(run_args)
exit(proc.wait())

#git clean -ndx ${DISTCLEAN_EXCLUDE}

